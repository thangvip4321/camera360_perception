<?xml version="1.0"?>

<launch>
	<arg name="camera_name" default="camera360" /> 

	<arg name="front_lens_name" default="front_lens"/>
	<arg name="rear_lens_name" default="rear_lens"/> 

	<!-- =========================================================================================================== -->
	<!-- Initialize nodelet -->
	<node pkg="nodelet" type="nodelet" name="$(arg camera_name)_nodelet_manager" args="manager" output="screen" respawn="true">
		<param name="num_worker_threads" value="9"/>
	</node>
	<!-- =========================================================================================================== -->


	<!-- =========================================================================================================== -->
	<!-- Connect to 360 degree camera -->
	<include file="$(find camera360_perception)/launch/camera.launch" pass_all_args="true"/>

	<!-- =========================================================================================================== -->


	<!-- =========================================================================================================== -->
	<!-- Front camera projection -->
	<include file="$(find camera360_perception)/launch/projections.launch" pass_all_args="true"/>
	<!-- =========================================================================================================== -->


	<!-- =========================================================================================================== -->
	<!-- Create tf -->
	<param name="robot_description" command="$(find xacro)/xacro $(find camera360_perception)/urdf/insta360.urdf.xacro"/>
	<node name="robot_state_publisher" type="robot_state_publisher" pkg="robot_state_publisher" output="screen"/>
	<node pkg="tf2_ros" type="buffer_server" name="tf2_buffer_server" output="screen"/>
	<!-- =========================================================================================================== -->

	

<!-- ======================================================== -->

    <!-- <node pkg="camera360_perception" name="calibrate_stitch_cam_right" type="calibrate_stitch.py" output="screen">
		<param name="camera_info_file" value="$(find camera360_perception)/cfg/cameras_info/insta360_air/camera_intrinsic_right.yaml"/>
		<param name="left_img_input" value="/$(arg camera_name)/$(arg front_lens_name)/right_projection/image_rect/compressed"/>
		<param name="right_img_input" value="/$(arg camera_name)/$(arg rear_lens_name)/left_projection/image_rect/compressed"/>s
		<param name="output_config_file" value="$(find camera360_perception)/cfg/stitch/stitch_right.yaml" />  
	</node> -->


<!-- the problem is that not every camera need to include intrinsic matrix -->
	<node pkg="camera360_perception" name="calibrate_stitch_cam_left" type="calibrate_stitch.py" output="screen">
		<param name="camera_info_file" value="$(find camera360_perception)/cfg/cameras_info/insta360_air/camera_intrinsic_left.yaml"/>
		<param name="right_img_input" value="/$(arg camera_name)/$(arg front_lens_name)/left_projection/image_rect/compressed"/>
		<param name="left_img_input" value="/$(arg camera_name)/$(arg rear_lens_name)/right_projection/image_rect/compressed"/>
		<param name="output_config_file" value="$(find camera360_perception)/cfg/stitch/stitch_left.yaml" />  
	</node> 

	<!-- <node pkg="camera360_perception" name="calibrate_stitch_cam_right" type="calibrate_stitch_aruco.py" output="screen">
		<param name="camera_info_file" value="$(find camera360_perception)/cfg/cameras_info/insta360_air/camera_intrinsic.yaml"/>
		<param name="right_img_input" value="/$(arg camera_name)/$(arg front_lens_name)/right_projection/image_rect/compressed"/>
		<param name="left_img_input" value="/$(arg camera_name)/$(arg front_lens_name)/left_projection/image_rect/compressed"/>s
		<param name="output_config_file" value="$(find camera360_perception)/cfg/stitch/stitch_right.yaml" />  
	</node> -->
</launch>