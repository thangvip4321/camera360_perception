<?xml version="1.0"?>

<launch>
	<arg name="camera_name" default="camera360" /> 

	<arg name="front_lens_name" default="front_lens"/>
	<arg name="rear_lens_name" default="rear_lens"/> 

	<!-- =========================================================================================================== -->
	<!-- Initialize nodelet -->
	<node pkg="nodelet" type="nodelet" name="$(arg camera_name)_nodelet_manager" args="manager" output="screen" respawn="true">
		<param name="num_worker_threads" value="9"/>
	</node>
	<!-- =========================================================================================================== -->


	<!-- =========================================================================================================== -->
	<!-- Connect to 360 degree camera -->
	<node pkg="nodelet" type="nodelet" name="usb_cam"
		args="load usb_cam/UsbCamNodelet $(arg camera_name)_nodelet_manager" output="screen" >
		<param name="video_device" value="/dev/video2" />
		<param name="image_width" value="3008" />
		<param name="image_height" value="1504" />
		<param name="pixel_format" value="mjpeg" />
		<param name="io_method" value="mmap"/>
		<param name="camera_frame_id" value="usb_cam" />
		<remap from="/usb_cam/image_raw" to="/$(arg camera_name)/image_raw"/>
	</node>
	<node pkg="rosservice" type="rosservice" name="global_loc" args="call --wait /usb_cam/toggle_capture true" />
	<!-- =========================================================================================================== -->


	<!-- =========================================================================================================== -->
	<!-- Create tf -->
	<param name="robot_description" command="$(find xacro)/xacro $(find image_projection_demo)/urdf/insta360.urdf.xacro"/>
	<node name="robot_state_publisher" type="robot_state_publisher" pkg="robot_state_publisher" output="screen"/>
	<node pkg="tf2_ros" type="buffer_server" name="tf2_buffer_server" output="screen"/>
	<!-- =========================================================================================================== -->


	<!-- =========================================================================================================== -->
	<!-- Publish the calibration -->
	<node name="$(arg front_lens_name)" ns="$(arg camera_name)" pkg="kalibr_extended_camera_info_publisher"
			type="camera_info_publisher_node" >
		<param name="camera_ns" value="$(arg front_lens_name)"/>
		<param name="frame_id" value="$(arg camera_name)_$(arg front_lens_name)_optical_frame"/>
		<rosparam command="load" file="$(find image_projection_demo)/config/insta360_air/$(arg front_lens_name).yaml" subst_value="true" />
	</node>

	<node name="$(arg rear_lens_name)" ns="$(arg camera_name)" pkg="kalibr_extended_camera_info_publisher"
			type="camera_info_publisher_node">
		<param name="camera_ns" value="$(arg rear_lens_name)"/>
		<param name="frame_id" value="$(arg camera_name)_$(arg rear_lens_name)_optical_frame"/>
		<rosparam command="load" file="$(find image_projection_demo)/config/insta360_air/$(arg rear_lens_name).yaml" subst_value="true" />
	</node>
	<!-- =========================================================================================================== -->


	<!-- =========================================================================================================== -->
	<!-- Extract front image -->
	<arg name="split_image_width" default="1504" />
	<arg name="split_image_height" default="1504" />

	<node pkg="nodelet" type="nodelet" name="$(arg camera_name)_split_front" 
			args="load image_proc/crop_decimate $(arg camera_name)_nodelet_manager" output="screen" respawn="true">

		<param name="queue_size" type="int" value="10" />
		<param name="x_offset" type="int" value="$(arg split_image_width)" />
		<param name="y_offset" type="int" value="0" />
		<param name="width" type="int" value="$(arg split_image_width)" />
		<param name="height" type="int" value="$(arg split_image_height)" />
		<!-- <param name="camera_name" value="front"/> -->
		<param name="target_frame_id" value="$(arg camera_name)_$(arg front_lens_name)_optical_frame"/>

		<remap from="camera/image_raw" to="/$(arg camera_name)/image_raw"/>
		<remap from="camera/image_info" to="/$(arg camera_name)/camera_info"/>

		<!-- Remap output to front image -->
		<remap from="camera_out/image_raw" to="/$(arg camera_name)/$(arg front_lens_name)/image_raw" />
		<!-- Dont use original camera info -->
		<remap from="/stereo/right/camera_info" to="/null/right/camera_info" />
	</node>

	<!-- Extract rear image -->
	<node pkg="nodelet" type="nodelet" name="$(arg camera_name)_split_rear" 
			args="load image_proc/crop_decimate $(arg camera_name)_nodelet_manager" output="screen" respawn="true">

		<!-- <param name="camera_info_url" value="$(arg camera_info_url_left)" /> -->
		<param name="queue_size" type="int" value="10" />
		<param name="x_offset" type="int" value="0" />
		<param name="y_offset" type="int" value="0" />
		<param name="width" type="int" value="$(arg split_image_width)" />
		<param name="height" type="int" value="$(arg split_image_height)" />
		<!-- <param name="camera_name" value="rear"/> -->
		<param name="target_frame_id" value="$(arg camera_name)_$(arg rear_lens_name)_optical_frame"/>

		<remap from="camera/image_raw" to="/$(arg camera_name)/image_raw"/>
		<remap from="camera/image_info" to="/$(arg camera_name)/camera_info"/>

		<!-- Remap output to rear image -->
		<remap from="camera_out/image_raw" to="/$(arg camera_name)/$(arg rear_lens_name)/image_raw" />
		<!-- Dont use original camera info -->
		<remap from="/stereo/left/camera_info" to="/null/left/camera_info" />
	</node>
	<!-- =========================================================================================================== -->


	<!-- =========================================================================================================== -->
	<!-- Front camera projection -->


	<!-- Left view pinhole projection front camera -->
	<node pkg="nodelet" type="nodelet" name="left_projection_front_lens" 
			args="load image_projection/PeriodicImageProjectionNodelet $(arg camera_name)_nodelet_manager" 
			output="screen" respawn="true">

		<rosparam command="load" file="$(find image_projection_demo)/config/$(arg front_lens_name)_left_projection.yaml" 
				ns="/$(arg camera_name)/$(arg front_lens_name)/left_projection" subst_value="true"/>	

		<remap from="/left_projection_front_lens" to="/$(arg camera_name)/$(arg front_lens_name)/left_projection"/> <!-- MUST HAVE -->
		<remap from="/$(arg camera_name)/$(arg front_lens_name)/left_projection/projection" 
				to="/$(arg camera_name)/$(arg front_lens_name)/left_projection/image_rect"/>
	</node>

	<!-- Right view pinhole projection front camera -->
	<node pkg="nodelet" type="nodelet" name="right_projection_front_lens" 
			args="load image_projection/PeriodicImageProjectionNodelet $(arg camera_name)_nodelet_manager" 
			output="screen" respawn="true">

		<rosparam command="load" file="$(find image_projection_demo)/config/$(arg front_lens_name)_right_projection.yaml" 
				ns="/$(arg camera_name)/$(arg front_lens_name)/right_projection" subst_value="true"/>	

		<remap from="/right_projection_front_lens" to="/$(arg camera_name)/$(arg front_lens_name)/right_projection"/> <!-- MUST HAVE -->
		<remap from="/$(arg camera_name)/$(arg front_lens_name)/right_projection/projection" 
				to="/$(arg camera_name)/$(arg front_lens_name)/right_projection/image_rect"/>
	</node>
	<!-- =========================================================================================================== -->


	<!-- =========================================================================================================== -->
	<!-- Rear camera projection -->



	<!-- Left view pinhole projection rear camera -->
	<node pkg="nodelet" type="nodelet" name="left_projection_rear_lens" 
			args="load image_projection/PeriodicImageProjectionNodelet $(arg camera_name)_nodelet_manager" 
			output="screen" respawn="true">

		<rosparam command="load" file="$(find image_projection_demo)/config/$(arg rear_lens_name)_left_projection.yaml" 
				ns="/$(arg camera_name)/$(arg rear_lens_name)/left_projection" subst_value="true"/>	

		<remap from="/left_projection_rear_lens" to="/$(arg camera_name)/$(arg rear_lens_name)/left_projection"/> <!-- MUST HAVE -->
		<remap from="/$(arg camera_name)/$(arg rear_lens_name)/left_projection/projection" 
				to="/$(arg camera_name)/$(arg rear_lens_name)/left_projection/image_rect"/>
	</node>

	<!-- Right view pinhole projection rear camera -->
	<node pkg="nodelet" type="nodelet" name="right_projection_rear_lens" 
			args="load image_projection/PeriodicImageProjectionNodelet $(arg camera_name)_nodelet_manager" 
			output="screen" respawn="true">

		<rosparam command="load" file="$(find image_projection_demo)/config/$(arg rear_lens_name)_right_projection.yaml" 
				ns="/$(arg camera_name)/$(arg rear_lens_name)/right_projection" subst_value="true"/>	

		<remap from="/right_projection_rear_lens" to="/$(arg camera_name)/$(arg rear_lens_name)/right_projection"/> <!-- MUST HAVE -->
		<remap from="/$(arg camera_name)/$(arg rear_lens_name)/right_projection/projection" 
				to="/$(arg camera_name)/$(arg rear_lens_name)/right_projection/image_rect"/>
	</node>
<!-- ======================================================== -->


	<node pkg="camera360_perception" name="stitch_right" type="runtime_stitch.py" output="screen">
			<param name="camera_info_file" value="$(find camera360_perception)/configs/camera_intrinsic.yaml"/>
			<param name="left_img_input" value="/$(arg camera_name)/$(arg front_lens_name)/right_projection/image_rect/compressed"/>
			<param name="right_img_input" value="/$(arg camera_name)/$(arg rear_lens_name)/left_projection/image_rect/compressed"/>
			<rosparam command="load" file="/$(find camera360_perception)/configs/stitch_right.yaml"/>
			<param name="stitching_output" value="$(arg camera_name)/right" />
	</node>


	<node pkg="camera360_perception" name="stitch_left" type="runtime_stitch.py" output="screen">
			<param name="camera_info_file" value="$(find camera360_perception)/configs/camera_intrinsic.yaml"/>
			<param name="right_img_input" value="/$(arg camera_name)/$(arg front_lens_name)/left_projection/image_rect/compressed"/>
			<param name="left_img_input" value="/$(arg camera_name)/$(arg rear_lens_name)/right_projection/image_rect/compressed"/>
			<rosparam command="load" file="/$(find camera360_perception)/configs/stitch_left.yaml"/>
			<param name="stitching_output" value="$(arg camera_name)/left" />  
	</node>


	<node pkg="nodelet" type="nodelet" name="front_projection_front_lens" 
			args="load image_projection/PeriodicImageProjectionNodelet $(arg camera_name)_nodelet_manager" 
			output="screen" respawn="true">

		<rosparam command="load" file="$(find image_projection_demo)/config/$(arg front_lens_name)_front_projection.yaml" 
				ns="/$(arg camera_name)/$(arg front_lens_name)/front_projection" subst_value="true"/>	

		<remap from="/front_projection_front_lens" to="/$(arg camera_name)/$(arg front_lens_name)/front_projection"/> 
		<remap from="/$(arg camera_name)/$(arg front_lens_name)/front_projection/projection" 
				to="/$(arg camera_name)/$(arg front_lens_name)/front_projection/image_rect"/>
	</node>


	<node pkg="nodelet" type="nodelet" name="front_projection_rear_lens" 
			args="load image_projection/PeriodicImageProjectionNodelet $(arg camera_name)_nodelet_manager" 
			output="screen" respawn="true">

		<rosparam command="load" file="$(find image_projection_demo)/config/$(arg rear_lens_name)_front_projection.yaml" 
				ns="/$(arg camera_name)/$(arg rear_lens_name)/front_projection" subst_value="true"/>	

		<remap from="/front_projection_rear_lens" to="/$(arg camera_name)/$(arg rear_lens_name)/front_projection"/> 
		<remap from="/$(arg camera_name)/$(arg rear_lens_name)/front_projection/projection" 
				to="/$(arg camera_name)/$(arg rear_lens_name)/front_projection/image_rect"/>
	</node>

	<!-- <node pkg="camera360_perception" name="calibrate_left_bev" type="calibration_roscamera.py" output="screen">
			<param name="stitched_input" value="/$(arg camera_name)/left"/>
			<param name="camera_info_file" value="$(find camera360_perception)/configs/camera_intrinsic.yaml"/>
			<param name="output_calibration_file" value="$(find camera360_perception)/configs/bev_left.json"/>  
	</node> -->
    <!-- <node pkg="camera360_perception" name="calibrate_front_bev" type="calibration_roscamera.py" output="screen">
			<param name="stitched_input" value="/$(arg camera_name)/$(arg front_lens_name)/front_projection/image_rect/compressed"/>
			<param name="camera_info_file" value="$(find camera360_perception)/configs/camera_intrinsic.yaml"/>
			<param name="output_calibration_file" value="$(find camera360_perception)/configs/bev_front.json"/>  
	</node> -->
    <!-- <node pkg="camera360_perception" name="calibrate_rear_bev" type="calibration_roscamera.py" output="screen">
			<param name="stitched_input" value="/$(arg camera_name)/$(arg rear_lens_name)/front_projection/image_rect/compressed"/>
			<param name="camera_info_file" value="$(find camera360_perception)/configs/camera_intrinsic.yaml"/>
			<param name="output_calibration_file" value="$(find camera360_perception)/configs/bev_rear.json"/>  
	</node> -->
	<!-- <node pkg="camera360_perception" name="calibrate_right_bev" type="calibration_roscamera.py" output="screen">
			<param name="stitched_input" value="/$(arg camera_name)/right"/>
			<param name="camera_info_file" value="/$(find camera360_perception)/configs/camera_intrinsic.yaml"/>
			<param name="output_calibration_file" value="$(find camera360_perception)/configs/bev_right.json"/>  
	</node> -->

</launch>